# ESPHome Control Garaje

# ************ Equipment Used ****************
  # ESP32
  # Placa de rel√©
  # Reed
  # Radar
  # Sensor

# ************ Pins Used on ESP32:  ************ 
  # D1: Rele
  # D2: Reed
  # D3: Radar
  # D4: Sensor
 
# Reed switches are connected to the pins above and other conductor to GND

 

# Setup esphome and choose platform and board
esphome:
  name: garage_door_relay
  platform: ESP32
  board: nodemcu-32s

# Enable WiFi. Actual passwords are in a secrets file but you can also enter
# your credentials below
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPhome_Garaje"
    password: "12345678"

captive_portal:

# Activar log, Home Assistant API y OTA
logger:

api:

ota:

# REED SENSOR
binary_sensor:
  - platform: gpio
    pin: 
      number: D6
      mode: INPUT_PULLUP
      inverted: False
    name: "Sensor puerta garaje"
    id: sensor_garaje
    device_class: garage_door
    internal: true 
    filters:
      - delayed_on_off: 1s

# RELE
switch:
- platform: gpio
  id: rele_garaje
  internal: true
  pin:
    number: GPIO21
    inverted: False
  restore_mode: ALWAYS_OFF 
      

# ********** UPTIME and WiFi RSSI *********    
# This section is mostly for fun, providing uptime and WiFi RSSI

# "Human readable" means that the uptime will be displayed in dd:hh:mm:ss
# instead of just seconds
text_sensor:
  - platform: template
    name: Uptime Human Readable Garage Door
    id: uptime_human_garagedoor
    icon: mdi:clock-start
sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human_garagedoor
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

# Why not add a sensor to see WiFi strength?
  
  - platform: wifi_signal
    name: "Garaje Wifi Strength"
    update_interval: 60s
   
# CONTROL PUERTA
cover:
  - platform: template
    device_class: garage
    name: "Puerta Garaje"
    lambda: |-
      if (id(sensor_garaje).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
 
    open_action:
      - switch.turn_off: rele_garaje
      - switch.turn_on: rele_garaje
      - delay: 0.2s
      - switch.turn_off: rele_garaje
    
    close_action:
      - switch.turn_off: rele_garaje
      - switch.turn_on: rele_garaje
      - delay: 0.2s
      - switch.turn_off: rele_garaje
    
    stop_action:
      - switch.turn_on: rele_garaje
      - delay: 0.2s
      - switch.turn_off: rele_garaje
      
    optimistic: true
    assumed_state: true
